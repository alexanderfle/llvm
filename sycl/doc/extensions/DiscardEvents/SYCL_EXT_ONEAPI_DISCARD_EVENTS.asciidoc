= SYCL_EXT_ONEAPI_DISCARD_EVENTS
:source-highlighter: coderay
:coderay-linenums-mode: table

// This section needs to be after the document title.
:doctype: book
:toc2:
:toc: left
:encoding: utf-8
:lang: en

:blank: pass:[ +]

// Set the default source code type in this document to C++,
// for syntax highlighting purposes.  This is needed because
// docbook uses c++ and html5 uses cpp.
:language: {basebackend@docbook:c++:cpp}

// This is necessary for asciidoc, but not for asciidoctor
:cpp: C++

== Introduction

IMPORTANT: This specification is a draft.

NOTE: Khronos(R) is a registered trademark and SYCL(TM) and SPIR(TM) are
trademarks of The Khronos Group Inc.  OpenCL(TM) is a trademark of Apple Inc.
used by permission by Khronos.

This document describes an extension that introduces a discard_events property for
SYCL queues.  This property enables developers to inform a SYCL implementation that
the returned event can be discarded.

== Notice

Copyright (c) 2021 Intel Corporation. All rights reserved.

== Status

Working Draft

This is a preview extension specification, intended to provide early access to
a feature for review and community feedback. When the feature matures, this
specification may be released as a formal extension.

Because the interfaces defined by this specification are not final and are
subject to change they are not intended to be used by shipping software
products.

== Version

Built On: {docdate} +
Revision: 1

== Dependencies

This extension is written against the SYCL 2020 specification, Revision 3.

== Feature Test Macro

This extension provides a feature-test macro as described in the core SYCL
specification section 6.3.3 "Feature test macros".  Therefore, an
implementation supporting this extension must predefine the macro
`SYCL_EXT_ONEAPI_DISCARD_EVENTS` to one of the values defined in the table below.
Applications can test for the existence of this macro to determine if the
implementation supports this feature, or applications can test the macro's
value to determine which of the extension's APIs the implementation supports.

[%header,cols="1,5"]
|===
|Value |Description
|1     |Initial extension version.  Base features are supported.
|===

== Overview

This extension adds `ext::oneapi::property::queue::discard_events` property for `sycl::queue`,
by using this property the application informs a SYCL implementation that the returned event can be discarded.

In that case, the implementation makes a decision about internal optimization -- avoiding
the creation of low-level event from the backend. The property affects only kernel cases,
i.e. avoid creating low-level event for submission of kernels.
Performance improvement is the main motivation for using this property.

Below is a usage example:

[source,c++]
----
  sycl::property_list props{ext::oneapi::property::queue::discard_events{},
                            property::queue::in_order()};
  sycl::queue Queue( props );

  // some USM preparations ..

  // creating "null" events
  sycl::event e1, e2, e3;

  // returning "null" events from each submission function:
  e1 = Queue.parallel_for(NDRange, [=](nd_item<1> item){ do_smth1(); });

  e2 = Queue.single_task([=](){ do_smth2(); });

  e3 = Queue.submit([&](handler &CGH) { CGH.parallel_for(NDRange, [=](nd_item<1> item){ do_smth3(); }); });

  Queue.wait();
----

In the example above, the application doesn't use sycl events: `e1`, `e2`, `e3`
and is waiting for the end of work by `queue::wait()`. The returned events will be
_null_ events - means that low-level events from backend are not created for them.

Note: Some API calls and interactions with _null_ event can have different behavior
if comparing the behavior with the behavior of default event, see below for details.

_null_ event API behavior:
[source,c++]
----
// the behavior is the same as for the default event, i.e. must return backend::host
backend get_backend() const noexcept;

// the behavior is the same as for the default event, i.e. must return a zero-sized vector
std::vector<event> get_wait_list();

// must throw an exception with the errc::invalid_object error code.
void wait();

// passing _null_ event in the function must throw an exception with the errc::invalid_object error code.
static void wait(const std::vector<event> &eventList);

// must throw an exception with the errc::invalid_object error code.
void wait_and_throw();

// passing _null_ event in the function must throw an exception with the errc::invalid_object error code.
static void wait_and_throw(const std::vector<event> &eventList);

// returns info::event_command_status::ext_oneapi_unknown status
get_info<info::event::command_execution_status>() const;

// the behavior is the same as for the default event, i.e. returns 0
get_info<info::event::reference_count>() const;

// the behavior is the same as for the default event, i.e. must throw an exception with the errc::invalid_object error code
template <info::event_profiling param>
typename param::return_type get_profiling_info() const;
----

The behavior when passing _null_ event to handler API:
[source,c++]
----
// must throw an exception with the errc::invalid_object error code.
handler::depends_on(event Event)

// must throw an exception with the errc::invalid_object error code.
handler::depends_on(const std::vector<event> &Events)
----

== Limitations

If the queue has this property and for some reason an event needs to be created,
then an appropriate exception will be thrown.
The reasons for throwing the exception are described in the following paragraphs.

=== Using out-of-order queue and/or using together with enable_profiling property

If a queue is created with the discard_events property, the property list must also include
the in_order property and must not include the enable_profiling property. If these conditions
do not hold, the implementation must throw an exception with the errc::invalid_parameter error code.

[source,c++]
----
  sycl::property_list props{ext::oneapi::property::queue::discard_events{}};

  // Creating queue throws an exception with the errc::invalid_parameter error code.
  sycl::queue Queue( props );
----

[source,c++]
----
  sycl::property_list props{property::queue::enable_profiling{},
                            ext::oneapi::property::queue::discard_events{},
                            property::queue::in_order()};
  // Creating queue throws an exception with the errc::invalid_parameter error code.
  sycl::queue Queue( props );
----

=== Using fallback assert feature

If a kernel that uses the
https://github.com/intel/llvm/blob/sycl/sycl/doc/extensions/Assert/SYCL_ONEAPI_ASSERT.asciidoc[fallback assert feature]
is submitted to a queue created with the discard_events property, the implementation
must throw an exception with the errc::invalid_object error code.
To disable fallback assert, developer must compile with SYCL_DISABLE_FALLBACK_ASSERT macro defined,
for more details see https://github.com/intel/llvm/blob/sycl/sycl/doc/PreprocessorMacros.md[document]

[source,c++]
----
  sycl::property_list props{ext::oneapi::property::queue::discard_events{},
                            property::queue::in_order()};
  sycl::queue Queue( props );

  // if the submission of kernel1 is compiled with fallback assert enabled,
  // then the submission of the kernel throws an exception with the errc::invalid_object error code.
  Queue.parallel_for<class kernel1>(NDRange, [=](nd_item<1> item){ do_smth(); });
----

=== Using streams, buffer/image accessors (excluding local accessors)

If a kernel that uses stream objects, buffer or image accessors is submitted to a queue created with
the discard_events property, the implementation must throw an exception with the errc::invalid_object error code.

[source,c++]
----
  sycl::property_list props{ext::oneapi::property::queue::discard_events{},
                            property::queue::in_order()};
  sycl::queue Queue( props );

  sycl::buffer<int, Dims> buf(NDRange);

  // the submission of the kernel throws an exception with the errc::invalid_object error code.
  Queue.submit([&](handler &CGH) {
    auto dev_acc = buf.get_access<sycl::access::mode::discard_write>(cgh);
    CGH.parallel_for(NDRange, [=](nd_item<Dims> item){  /* using dev_acc */  });
  });

----
*NOTE : This extension is only compatible with kernels using Unified Shared Memory (USM) pointers.
SYCL accessors are used to build a dependency graph that rely on events being created and not discarded.

== Issues

None.

== Revision History

[cols="5,15,15,70"]
[grid="rows"]
[options="header"]
|========================================
|Rev|Date|Author|Changes
|1|2021-11-09|Alexander Flegontov |*Initial public working draft*
|========================================
